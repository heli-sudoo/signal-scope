/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class test_signal_sequence_lcmt implements lcm.lcm.LCMEncodable
{
    public float pos[][];
    public float rpy[];
    public float q_knee[];
    public float q_hip[];
    public float timestep[];
 
    public test_signal_sequence_lcmt()
    {
        pos = new float[3][100];
        rpy = new float[100];
        q_knee = new float[100];
        q_hip = new float[100];
        timestep = new float[100];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3acb24f475895c71L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.test_signal_sequence_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.test_signal_sequence_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                outs.writeFloat(this.pos[a][b]); 
            }
        }
 
        for (int a = 0; a < 100; a++) {
            outs.writeFloat(this.rpy[a]); 
        }
 
        for (int a = 0; a < 100; a++) {
            outs.writeFloat(this.q_knee[a]); 
        }
 
        for (int a = 0; a < 100; a++) {
            outs.writeFloat(this.q_hip[a]); 
        }
 
        for (int a = 0; a < 100; a++) {
            outs.writeFloat(this.timestep[a]); 
        }
 
    }
 
    public test_signal_sequence_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public test_signal_sequence_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.test_signal_sequence_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.test_signal_sequence_lcmt o = new lcmtypes.test_signal_sequence_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.pos = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 100; b++) {
                this.pos[a][b] = ins.readFloat();
            }
        }
 
        this.rpy = new float[(int) 100];
        for (int a = 0; a < 100; a++) {
            this.rpy[a] = ins.readFloat();
        }
 
        this.q_knee = new float[(int) 100];
        for (int a = 0; a < 100; a++) {
            this.q_knee[a] = ins.readFloat();
        }
 
        this.q_hip = new float[(int) 100];
        for (int a = 0; a < 100; a++) {
            this.q_hip[a] = ins.readFloat();
        }
 
        this.timestep = new float[(int) 100];
        for (int a = 0; a < 100; a++) {
            this.timestep[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.test_signal_sequence_lcmt copy()
    {
        lcmtypes.test_signal_sequence_lcmt outobj = new lcmtypes.test_signal_sequence_lcmt();
        outobj.pos = new float[(int) 3][(int) 100];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.pos[a], 0, outobj.pos[a], 0, 100);        }
 
        outobj.rpy = new float[(int) 100];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 100); 
        outobj.q_knee = new float[(int) 100];
        System.arraycopy(this.q_knee, 0, outobj.q_knee, 0, 100); 
        outobj.q_hip = new float[(int) 100];
        System.arraycopy(this.q_hip, 0, outobj.q_hip, 0, 100); 
        outobj.timestep = new float[(int) 100];
        System.arraycopy(this.timestep, 0, outobj.timestep, 0, 100); 
        return outobj;
    }
 
}

